version: "3.8"

services:
  apt-cacher-ng:
    build:
      context: ./apt-cacher-ng
      dockerfile: Dockerfile
    volumes:
      - apt-cache:/var/cache/apt-cacher-ng
    ports:
      - "3142:3142"
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1.0"
    #       memory: 512M

  tinyproxy:
    image: docker.io/kalaksi/tinyproxy
    # You can also use GitLab as an alternative to Docker Hub:
    # image: registry.gitlab.com/kalaksi-containers/tinyproxy
    restart: unless-stopped
    cap_drop:
      - ALL
    ports:
      - 8888:8888
    # See tinyproxy.conf for better explanation of these values.
    environment:
      # Set to "yes" to disable the Via-header, set to empty to leave it enabled.
      DISABLE_VIA_HEADER: "yes"
      # Set this to e.g. tinyproxy.stats to enable stats-page on that address
      STAT_HOST: tinyproxy.stats
      MAX_CLIENTS: 100
      # A space separated list:
      ALLOWED_NETWORKS: 127.0.0.1/8 10.0.0.0/8
      # One of Critical, Error, Warning, Notice, Connect, Info
      LOG_LEVEL: Notice
      # Maximum number of seconds idle connections are allowed to remain open
      TIMEOUT: 900
      # Username for BasicAuth
      # AUTH_USER: ''
      # Password for BasicAuth (letters and digits only)
      # Prefer secrets-mechanisms instead of environment variables.
      # AUTH_PASSWORD: ''
    # secrets:
    #   - auth_password
    # # With Alpine base image, this is required, for some reason, or /run/secrets won't get mounted.
    # tmpfs:
    #   - /run
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-I",
          "-H",
          "Host: tinyproxy.stats",
          "http://localhost:8888",
        ]
      interval: 5m
      timeout: 10s
      retries: 1
    volumes:
      - apk-cache:/var/cache/apk
    # volumes:
    #   # If not using docker-compose for secrets, you can still manually mount a file containing the password.
    #   - ./secrets/auth_password:/run/secrets/auth_password:ro

  # tinyproxy:
  #   image: joshuarli/tinyproxy # Or a suitable Tinyproxy image
  #   volumes:
  #     - apk-cache:/var/cache/apk
  #   ports:
  #     - "3142:8888" # Proxy port:Port inside the container
  #   # You might need to add volumes or other config as needed

  squid-deb-proxy:
    build:
      context: ./squid-deb-proxy # Path to the new Dockerfile
      dockerfile: Dockerfile
    volumes:
      - squid-cache:/var/spool/squid-deb-proxy
    ports:
      - "3142:3143"

  verdaccio:
    image: verdaccio/verdaccio
    volumes:
      # - ./verdaccio/config.yaml:/verdaccio/conf/config.yaml
      - verdaccio_storage:/verdaccio/storage
    ports:
      - "4873:4873"

  runner:
    image: pwd9000-github-runner-lin:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ryan/.local/share/pnpm/store/v3:/home/docker/.pnpm-store
      # - /run/media/ryan/ubuntu/cache:/home/docker/cache
    build:
      network: host
      context: .
      dockerfile: Dockerfile
      args:
        RUNNER_VERSION: "2.314.1"
        DOCKER_GID: ${DOCKER_GID}
    environment:
      GH_TOKEN: ${GH_TOKEN}
      GH_OWNER: ${GH_OWNER}
      GH_REPOSITORY: ${GH_REPOSITORY}
    depends_on:
      - apt-cacher-ng
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1.0"
    #       memory: 2048M

  runner2:
    image: pwd9000-github-runner-lin:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ryan/.local/share/pnpm/store/v3:/home/docker/.pnpm-store
      - /run/media/ryan/ubuntu/cache:/home/docker/cache
    build:
      network: host
      context: .
      dockerfile: Dockerfile
      args:
        RUNNER_VERSION: "2.314.1"
        DOCKER_GID: ${DOCKER_GID}
    environment:
      GH_TOKEN: ${GH_TOKEN2}
      GH_OWNER: ${GH_OWNER2}
      GH_REPOSITORY: ${GH_REPOSITORY2}
    depends_on:
      - apt-cacher-ng
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1.0"
    #       memory: 2048M

  runner3:
    image: pwd9000-github-runner-lin:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ryan/.local/share/pnpm/store/v3:/home/docker/.pnpm-store
      - /run/media/ryan/ubuntu/cache:/home/docker/cache
    build:
      network: host
      context: .
      dockerfile: Dockerfile
      args:
        RUNNER_VERSION: "2.314.1"
        DOCKER_GID: ${DOCKER_GID}
    environment:
      GH_TOKEN: ${GH_TOKEN3}
      GH_OWNER: ${GH_OWNER3}
      GH_REPOSITORY: ${GH_REPOSITORY3}
    depends_on:
      - apt-cacher-ng
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1.0"
    #       memory: 2048M

  runner4:
    image: pwd9000-github-runner-lin:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /home/ryan/.local/share/pnpm/store/v3:/home/docker/.pnpm-store
      - /run/media/ryan/ubuntu/cache:/home/docker/cache
    build:
      network: host
      context: .
      dockerfile: Dockerfile
      args:
        RUNNER_VERSION: "2.314.1"
        DOCKER_GID: ${DOCKER_GID}
    environment:
      GH_TOKEN: ${GH_TOKEN4}
      GH_OWNER: ${GH_OWNER4}
      GH_REPOSITORY: ${GH_REPOSITORY4}
    depends_on:
      - apt-cacher-ng
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "1.0"
    #       memory: 2048M

volumes:
  apt-cache: {}
  apk-cache: {}
  squid-cache: {}
  verdaccio_storage: {}
